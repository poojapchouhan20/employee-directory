{"ast":null,"code":"import { EmployeeService } from '../../services/employee.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { NotificationService } from '../../services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/employee.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../services/notification.service\";\nimport * as i5 from \"@angular/common\";\nfunction EmployeeFormComponent_div_7_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"First name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, EmployeeFormComponent_div_7_small_1_Template, 2, 0, \"small\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.firstName == null ? null : ctx_r0.firstName.errors == null ? null : ctx_r0.firstName.errors[\"required\"]);\n  }\n}\nfunction EmployeeFormComponent_div_10_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Last name is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, EmployeeFormComponent_div_10_small_1_Template, 2, 0, \"small\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.lastName == null ? null : ctx_r1.lastName.errors == null ? null : ctx_r1.lastName.errors[\"required\"]);\n  }\n}\nfunction EmployeeFormComponent_div_13_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction EmployeeFormComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtemplate(1, EmployeeFormComponent_div_13_small_1_Template, 2, 0, \"small\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.email == null ? null : ctx_r2.email.errors == null ? null : ctx_r2.email.errors[\"required\"]);\n  }\n}\nlet EmployeeFormComponent = /*#__PURE__*/(() => {\n  class EmployeeFormComponent {\n    constructor(fb, employeeService, router, route, notificationService) {\n      this.fb = fb;\n      this.employeeService = employeeService;\n      this.router = router;\n      this.route = route;\n      this.notificationService = notificationService;\n      this.isEditMode = false;\n      this.formSubmitted = false; // made non-private so canDeactivate works properly\n      this.isLoading = false; // added isLoading flag\n    }\n\n    ngOnInit() {\n      this.employeeId = Number(this.route.snapshot.paramMap.get('id'));\n      this.isEditMode = !!this.employeeId;\n      this.employeeForm = this.fb.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]]\n      });\n      if (this.isEditMode) {\n        this.employeeService.getEmployee(this.employeeId).subscribe(employee => {\n          this.employeeForm.patchValue(employee);\n        });\n      }\n    }\n    onSubmit() {\n      if (this.employeeForm.invalid) {\n        return;\n      }\n      this.isLoading = true;\n      const employee = this.isEditMode ? {\n        id: this.employeeId,\n        ...this.employeeForm.value\n      } : {\n        ...this.employeeForm.value\n      };\n      const request = this.isEditMode ? this.employeeService.updateEmployee(this.employeeId, employee) : this.employeeService.addEmployee(employee);\n      request.subscribe({\n        next: () => {\n          const msg = this.isEditMode ? 'Employee updated successfully' : 'Employee added successfully';\n          this.notificationService.success(msg);\n          this.formSubmitted = true;\n          this.isLoading = false;\n          this.router.navigate(['/employees']);\n        },\n        error: () => {\n          this.notificationService.error(this.isEditMode ? 'Failed to update employee' : 'Failed to add employee');\n          this.isLoading = false;\n        }\n      });\n    }\n    onCancel() {\n      this.router.navigate(['/employees']);\n    }\n    canDeactivate() {\n      if (this.employeeForm.dirty && !this.formSubmitted) {\n        return confirm('You have unsaved changes. Do you really want to leave?');\n      }\n      return true;\n    }\n    get firstName() {\n      return this.employeeForm.get('firstName');\n    }\n    get lastName() {\n      return this.employeeForm.get('lastName');\n    }\n    get email() {\n      return this.employeeForm.get('email');\n    }\n    static {\n      this.ɵfac = function EmployeeFormComponent_Factory(t) {\n        return new (t || EmployeeFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EmployeeService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.NotificationService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: EmployeeFormComponent,\n        selectors: [[\"app-employee-form\"]],\n        decls: 14,\n        vars: 5,\n        consts: [[1, \"container\", \"mt-4\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\", \"w-25\"], [\"type\", \"text\", \"formControlName\", \"firstName\", \"placeholder\", \"First Name\", \"id\", \"firstName\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"lastName\", \"placeholder\", \"Last Name\", \"id\", \"lastName\", 1, \"form-control\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", \"id\", \"email\", 1, \"form-control\"], [1, \"text-danger\"], [4, \"ngIf\"]],\n        template: function EmployeeFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(3, \"hr\");\n            i0.ɵɵelementStart(4, \"form\", 1);\n            i0.ɵɵlistener(\"ngSubmit\", function EmployeeFormComponent_Template_form_ngSubmit_4_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(5, \"div\", 2);\n            i0.ɵɵelement(6, \"input\", 3);\n            i0.ɵɵtemplate(7, EmployeeFormComponent_div_7_Template, 2, 1, \"div\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(8, \"div\", 2);\n            i0.ɵɵelement(9, \"input\", 5);\n            i0.ɵɵtemplate(10, EmployeeFormComponent_div_10_Template, 2, 1, \"div\", 4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"div\", 2);\n            i0.ɵɵelement(12, \"input\", 6);\n            i0.ɵɵtemplate(13, EmployeeFormComponent_div_13_Template, 2, 1, \"div\", 4);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Update\" : \"Add\", \" Employee\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"formGroup\", ctx.employeeForm);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", (ctx.firstName == null ? null : ctx.firstName.touched) && (ctx.firstName == null ? null : ctx.firstName.invalid));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", (ctx.lastName == null ? null : ctx.lastName.touched) && (ctx.lastName == null ? null : ctx.lastName.invalid));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", (ctx.email == null ? null : ctx.email.touched) && (ctx.email == null ? null : ctx.email.invalid));\n          }\n        },\n        dependencies: [i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName]\n      });\n    }\n  }\n  return EmployeeFormComponent;\n})();\nexport { EmployeeFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}