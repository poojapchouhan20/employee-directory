{"ast":null,"code":"import { HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { AuthService } from '../services/auth.service'; // adjust the path if needed\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\n/**\n * JwtInterceptor intercepts all outgoing HTTP requests\n * and adds the JWT token to the Authorization header if available.\n */\nlet JwtInterceptor = /*#__PURE__*/(() => {\n  class JwtInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n    /**\n     * Intercepts HTTP requests and adds the Authorization header with a Bearer token.\n     *\n     * @param request The outgoing HTTP request\n     * @param next The next interceptor in the chain or the backend\n     * @returns An Observable of the HTTP event stream\n     */\n    intercept(request, next) {\n      // Get the JWT token from the authentication service\n      const token = this.authService.getToken();\n      if (token) {\n        // Clone the request to add the new header, as HttpRequest is immutable\n        request = request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}` // Add JWT token in the Authorization header\n          }\n        });\n      }\n      // Pass the (possibly modified) request to the next handler\n      return next.handle(request);\n    }\n    static {\n      this.ɵfac = function JwtInterceptor_Factory(t) {\n        return new (t || JwtInterceptor)(i0.ɵɵinject(i1.AuthService));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: JwtInterceptor,\n        factory: JwtInterceptor.ɵfac\n      });\n    }\n  }\n  return JwtInterceptor;\n})();\nexport { JwtInterceptor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}