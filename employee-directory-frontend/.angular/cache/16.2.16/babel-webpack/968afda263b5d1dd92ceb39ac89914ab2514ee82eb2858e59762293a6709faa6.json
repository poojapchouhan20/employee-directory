{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar _a;\nimport { Component } from '@angular/core';\nimport { EmployeeService } from '../../services/employee.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nlet EmployeeFormComponent = class EmployeeFormComponent {\n  constructor(fb, employeeService, router, route, toastr) {\n    this.fb = fb;\n    this.employeeService = employeeService;\n    this.router = router;\n    this.route = route;\n    this.toastr = toastr;\n    this.isEditMode = false;\n  }\n  ngOnInit() {\n    this.employeeId = Number(this.route.snapshot.paramMap.get('id'));\n    this.isEditMode = !!this.employeeId;\n    this.employeeForm = this.fb.group({\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]]\n    });\n    if (this.isEditMode) {\n      this.employeeService.getEmployee(this.employeeId).subscribe(employee => {\n        this.employeeForm.patchValue(employee);\n      });\n    }\n  }\n  onSubmit() {\n    if (this.employeeForm.invalid) {\n      return;\n    }\n    const employee = {\n      id: this.employeeId || 0,\n      ...this.employeeForm.value\n    };\n    if (this.isEditMode) {\n      this.employeeService.updateEmployee(this.employeeId, employee).subscribe(() => {\n        this.router.navigate(['/employees']);\n      });\n    } else {\n      this.employeeService.addEmployee(employee).subscribe(() => {\n        this.employeeForm.reset();\n        this.router.navigate(['/employees']);\n      });\n    }\n  }\n  onCancel() {\n    this.router.navigate(['/employees']);\n  }\n};\nEmployeeFormComponent = __decorate([Component({\n  selector: 'app-employee-form',\n  templateUrl: './employee-form.component.html',\n  styleUrls: ['./employee-form.component.css']\n}), __metadata(\"design:paramtypes\", [FormBuilder, EmployeeService, Router, ActivatedRoute, typeof (_a = typeof ToastrService !== \"undefined\" && ToastrService) === \"function\" ? _a : Object])], EmployeeFormComponent);\nexport { EmployeeFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}