{"ast":null,"code":"import { EmployeeService } from '../../services/employee.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { NotificationService } from '../../services/notification.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../services/employee.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../services/notification.service\";\nimport * as i5 from \"@angular/common\";\nfunction EmployeeFormComponent_tr_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"td\")(8, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function EmployeeFormComponent_tr_18_Template_button_click_8_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.editEmployee(employee_r1.id));\n    });\n    i0.ɵɵtext(9, \"Update\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function EmployeeFormComponent_tr_18_Template_button_click_10_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const employee_r1 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.deleteEmployee(employee_r1.id));\n    });\n    i0.ɵɵtext(11, \"Delete\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const employee_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(employee_r1.firstName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(employee_r1.lastName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(employee_r1.email);\n  }\n}\nlet EmployeeFormComponent = /*#__PURE__*/(() => {\n  class EmployeeFormComponent {\n    constructor(fb, employeeService, router, route, notificationService) {\n      this.fb = fb;\n      this.employeeService = employeeService;\n      this.router = router;\n      this.route = route;\n      this.notificationService = notificationService;\n      this.isEditMode = false;\n      this.formSubmitted = false;\n    }\n    ngOnInit() {\n      this.employeeId = Number(this.route.snapshot.paramMap.get('id'));\n      this.isEditMode = !!this.employeeId;\n      this.employeeForm = this.fb.group({\n        firstName: ['', Validators.required],\n        lastName: ['', Validators.required],\n        email: ['', [Validators.required, Validators.email]]\n      });\n      if (this.isEditMode) {\n        this.employeeService.getEmployee(this.employeeId).subscribe(employee => {\n          this.employeeForm.patchValue(employee);\n        });\n      }\n    }\n    onSubmit() {\n      if (this.employeeForm.invalid) {\n        return;\n      }\n      const employee = this.isEditMode ? {\n        id: this.employeeId,\n        ...this.employeeForm.value\n      } : {\n        ...this.employeeForm.value\n      };\n      if (this.isEditMode) {\n        this.employeeService.updateEmployee(this.employeeId, employee).subscribe(() => {\n          this.notificationService.success('Employee updated successfully');\n          this.formSubmitted = true;\n          this.router.navigate(['/employees']);\n        }, () => {\n          this.notificationService.error('Failed to update employee');\n        });\n      } else {\n        this.employeeService.addEmployee(employee).subscribe(() => {\n          this.notificationService.success('Employee added successfully');\n          this.formSubmitted = true;\n          this.employeeForm.reset();\n          this.router.navigate(['/employees']);\n        }, () => {\n          this.notificationService.error('Failed to add employee');\n        });\n      }\n    }\n    onCancel() {\n      this.router.navigate(['/employees']);\n    }\n    canDeactivate() {\n      if (this.employeeForm.dirty && !this.formSubmitted) {\n        return confirm('You have unsaved changes. Do you really want to leave?');\n      }\n      return true;\n    }\n    get firstName() {\n      return this.employeeForm.get('firstName');\n    }\n    get lastName() {\n      return this.employeeForm.get('lastName');\n    }\n    get email() {\n      return this.employeeForm.get('email');\n    }\n    static {\n      this.ɵfac = function EmployeeFormComponent_Factory(t) {\n        return new (t || EmployeeFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.EmployeeService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.NotificationService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: EmployeeFormComponent,\n        selectors: [[\"app-employee-form\"]],\n        decls: 19,\n        vars: 1,\n        consts: [[1, \"container\", \"mt-4\"], [1, \"btn\", \"btn-primary\", \"mb-3\", 3, \"click\"], [1, \"table\", \"table-bordered\", \"table-striped\"], [1, \"table-dark\"], [4, \"ngFor\", \"ngForOf\"], [1, \"btn\", \"btn-info\", \"btn-sm\", \"me-1\", 3, \"click\"], [1, \"btn\", \"btn-danger\", \"btn-sm\", 3, \"click\"]],\n        template: function EmployeeFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"h3\");\n            i0.ɵɵtext(2, \"Employee Directory\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(3, \"hr\");\n            i0.ɵɵelementStart(4, \"button\", 1);\n            i0.ɵɵlistener(\"click\", function EmployeeFormComponent_Template_button_click_4_listener() {\n              return ctx.addEmployee();\n            });\n            i0.ɵɵtext(5, \"Add Employee\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(6, \"table\", 2)(7, \"thead\", 3)(8, \"tr\")(9, \"th\");\n            i0.ɵɵtext(10, \"First Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(11, \"th\");\n            i0.ɵɵtext(12, \"Last Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(13, \"th\");\n            i0.ɵɵtext(14, \"Email\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(15, \"th\");\n            i0.ɵɵtext(16, \"Action\");\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(17, \"tbody\");\n            i0.ɵɵtemplate(18, EmployeeFormComponent_tr_18_Template, 12, 3, \"tr\", 4);\n            i0.ɵɵelementEnd()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(18);\n            i0.ɵɵproperty(\"ngForOf\", ctx.employees);\n          }\n        },\n        dependencies: [i5.NgForOf]\n      });\n    }\n  }\n  return EmployeeFormComponent;\n})();\nexport { EmployeeFormComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}