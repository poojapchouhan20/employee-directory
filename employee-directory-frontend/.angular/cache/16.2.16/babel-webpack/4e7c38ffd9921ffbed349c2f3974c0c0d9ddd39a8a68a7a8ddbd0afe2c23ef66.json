{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    constructor(http) {\n      this.http = http;\n      this.baseUrl = 'http://localhost:8080/api/employees';\n    }\n    getEmployees() {\n      return this.http.get(this.baseUrl).pipe(catchError(this.handleError));\n    }\n    getEmployee(id) {\n      return this.http.get(`${this.baseUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n    addEmployee(employee) {\n      return this.http.post(this.baseUrl, employee).pipe(catchError(this.handleError));\n    }\n    updateEmployee(id, employee) {\n      return this.http.put(`${this.baseUrl}/${id}`, employee).pipe(catchError(this.handleError));\n    }\n    deleteEmployee(id) {\n      return this.http.delete(`${this.baseUrl}/${id}`).pipe(catchError(this.handleError));\n    }\n    handleError(error) {\n      let errorMessage = 'An unknown error occurred!';\n      if (error.error instanceof ErrorEvent) {\n        // Client-side/network error\n        errorMessage = `Error: ${error.error.message}`;\n      } else {\n        // Server-side error\n        errorMessage = `Server returned code ${error.status}, message: ${error.message}`;\n      }\n      console.error(errorMessage);\n      return throwError(() => new Error(errorMessage));\n    }\n    static {\n      this.ɵfac = function EmployeeService_Factory(t) {\n        return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: EmployeeService,\n        factory: EmployeeService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return EmployeeService;\n})();\nexport { EmployeeService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}